%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Gamblin, Todd at 2021-12-14 00:03:11 -0800 


%% Saved with string encoding Unicode (UTF-8) 

@misc{maven-versions-useless,
  author       = {Michael Kutz},
  howpublished = {\url{https://michakutz.medium.com/legit-but-useless-maven-version-ranges-explained-d4ba66ac654}},
  title        = {Legit but Useless:{Maven} Version Ranges Explained},
  year         = 2019
}

@misc{npm-semver,
  author       = {{NPM}},
  howpublished = {\url{https://github.com/npm/node-semver}},
  title        = {semver(1) -- The semantic versioner for npm},
  year         = 2022,
  key          = {NPM}
}

@misc{cargo-renaming-deps,
  title        = {The Cargo Book: Renaming Dependencies in \texttt{cargo.toml}},
  key          = {Cargo},
  year         = 2022,
  howpublished = {\url{https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\#renaming-dependencies-in-cargotoml}}
}

@misc{pep440,
  author        = {Nick Coghlan},
  date-added    = {2021-12-14 00:02:17 -0800},
  date-modified = {2021-12-14 00:03:10 -0800},
  howpublished  = {Online},
  month         = {March 18},
  note          = {https://www.python.org/dev/peps/pep-0440},
  title         = {{PEP 440 -- Version Identification and Dependency Specification}},
  year          = {2013}
}

@inproceedings{broy1981algebraic,
  author        = {Broy, Manfred and Wirsing, Martin},
  booktitle     = {Colloquium on Trees in Algebra and Programming},
  date-added    = {2021-12-13 22:52:38 -0800},
  date-modified = {2021-12-13 22:52:38 -0800},
  organization  = {Springer},
  pages         = {162--179},
  title         = {On the algebraic specification of nondeterministic programming languages},
  year          = {1981}
}

@misc{react-dnd-conflict,
  author        = {Andrei Behel},
  date-added    = {2021-12-13 21:55:57 -0800},
  date-modified = {2021-12-13 21:58:58 -0800},
  month         = {October 26},
  note          = {https://github.com/atlassian/react-beautiful-dnd/issues/1993},
  title         = {GitHub Issue: React 17 support},
  year          = {2020}
}

@inproceedings{mancinelli+:ase06-foss-distros,
  author        = {F. {Mancinelli} and J. {Boender} and R. {di Cosmo} and J. {Vouillon} and B. {Durak} and X. {Leroy} and R. {Treinen}},
  booktitle     = {21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)},
  date-added    = {2021-11-28 07:41:31 -0800},
  date-modified = {2021-11-28 07:41:31 -0800},
  pages         = {199-208},
  title         = {Managing the Complexity of Large Free and Open Source Package-Based Software Distributions},
  year          = {2006},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBKLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvbWFuY2luZWxsaSthc2UwNi1mb3NzLWRpc3Ryb3MtYS5wZGZPEQG0AAAAAAG0AAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fbWFuY2luZWxsaSthc2UwNi1mI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAGAAQAAAogY3UAAAAAAAAAAAAAAAAABnBhcGVycwACAEkvOlVzZXJzOmdhbWJsaW4yOnNyYzpidWlsZC1iaWI6cGFwZXJzOm1hbmNpbmVsbGkrYXNlMDYtZm9zcy1kaXN0cm9zLWEucGRmAAAOAEgAIwBtAGEAbgBjAGkAbgBlAGwAbABpACsAYQBzAGUAMAA2AC0AZgBvAHMAcwAtAGQAaQBzAHQAcgBvAHMALQBhAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBHVXNlcnMvZ2FtYmxpbjIvc3JjL2J1aWxkLWJpYi9wYXBlcnMvbWFuY2luZWxsaSthc2UwNi1mb3NzLWRpc3Ryb3MtYS5wZGYAABMAAS8AABUAAgAP//8AAAAIAA0AGgAkAHEAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACKQ==}
}

@misc{pubgrub-rs,
  date-added    = {2021-11-28 07:22:29 -0800},
  date-modified = {2021-11-28 07:23:28 -0800},
  howpublished  = {Online},
  note          = {https://github.com/pubgrub-rs/pubgrub},
  title         = {{PubGrub version solving algorithm implemented in Rust}},
  year          = {2020}
}

@misc{pip-new-resolver,
  author        = {{Python Software Foundation}},
  date-added    = {2021-11-28 07:08:20 -0800},
  date-modified = {2021-11-28 07:09:12 -0800},
  howpublished  = {Online},
  month         = {March 23},
  note          = {https://pyfound.blogspot.com/2020/03/new-pip-resolver-to-roll-out-this-year.html},
  title         = {{New pip resolver to roll out this year}},
  year          = {2020}
}

@misc{klode:z3-apt,
  author        = {Julian Andres Klode},
  date-added    = {2021-11-28 07:03:58 -0800},
  date-modified = {2021-11-28 07:05:15 -0800},
  howpublished  = {Online},
  month         = {November 21},
  note          = {https://blog.jak-linux.org/2021/11/21/apt-z3-solver-basics/},
  title         = {{APT Z3 Solver Basics}},
  year          = {2021}
}

@misc{maier:hoisting,
  author        = {Thilo Maier},
  date-added    = {2021-11-28 07:02:39 -0800},
  date-modified = {2021-11-28 07:03:44 -0800},
  howpublished  = {Online},
  month         = {November 27},
  note          = {https://maier.tech/posts/a-guide-to-understanding-how-yarn-hoists-dependencies-and-handles-conflicting-packages},
  title         = {{A guide to understanding how Yarn hoists dependencies and handles conflicting packages}},
  year          = {2021}
}

@misc{yarn,
  date-added    = {2021-11-28 07:01:18 -0800},
  date-modified = {2021-11-28 07:01:55 -0800},
  note          = {https://github.com/yarnpkg/yarn},
  key           = {Yarn},
  year          = 2022,
  title         = {{Yarn: Yet Another Resource Negotiator} (Javascript package manager)}
}

@inproceedings{courtes-guix-2015,
  address       = {Vienne, Austria},
  author        = {Court{\`e}s, Ludovic and Wurmus, Ricardo},
  booktitle     = {{2nd International Workshop on Reproducibility in Parallel Computing (RepPar)}},
  date-added    = {2021-11-28 06:53:16 -0800},
  date-modified = {2021-11-28 06:53:16 -0800},
  hal_id        = {hal-01161771},
  hal_version   = {v2},
  keywords      = {hpc ; reproducible research ; package management ; calcul intensif ; gestion de paquets ; r{\'e}p{\'e}tabilit{\'e}},
  month         = Aug,
  pdf           = {https://hal.inria.fr/hal-01161771v2/file/reproducible-hpc.pdf},
  title         = {{Reproducible and User-Controlled Software Environments in HPC with Guix}},
  url           = {https://hal.inria.fr/hal-01161771},
  year          = {2015},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA+Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvY291cnRlcy1ndWl4LTIwMTUtYS5wZGZPEQGEAAAAAAGEAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8XY291cnRlcy1ndWl4LTIwMTUtYS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAGAAQAAAogY3UAAAAAAAAAAAAAAAAABnBhcGVycwACAD0vOlVzZXJzOmdhbWJsaW4yOnNyYzpidWlsZC1iaWI6cGFwZXJzOmNvdXJ0ZXMtZ3VpeC0yMDE1LWEucGRmAAAOADAAFwBjAG8AdQByAHQAZQBzAC0AZwB1AGkAeAAtADIAMAAxADUALQBhAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA7VXNlcnMvZ2FtYmxpbjIvc3JjL2J1aWxkLWJpYi9wYXBlcnMvY291cnRlcy1ndWl4LTIwMTUtYS5wZGYAABMAAS8AABUAAgAP//8AAAAIAA0AGgAkAGUAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB7Q==},
  bdsk-url-1    = {https://hal.inria.fr/hal-01161771}
}

@inproceedings{dolstra+:lisa04,
  acmid         = {1052686},
  address       = {Berkeley, CA, USA},
  author        = {Dolstra, Eelco and de Jonge, Merijn and Visser, Eelco},
  booktitle     = {Proceedings of the 18th Large Installation System Administration Conference (LISA XVIII)},
  date-added    = {2021-11-28 06:53:08 -0800},
  date-modified = {2021-11-28 06:53:08 -0800},
  location      = {Atlanta, GA},
  numpages      = {14},
  pages         = {79--92},
  publisher     = {USENIX Association},
  series        = {LISA '04},
  title         = {{Nix: A Safe and Policy-Free System for Software Deployment}},
  year          = {2004},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA7Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZG9sc3RyYStsaXNhMDQtYS5wZGZPEQF2AAAAAAF2AAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8UZG9sc3RyYStsaXNhMDQtYS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAGAAQAAAogY3UAAAAAAAAAAAAAAAAABnBhcGVycwACADovOlVzZXJzOmdhbWJsaW4yOnNyYzpidWlsZC1iaWI6cGFwZXJzOmRvbHN0cmErbGlzYTA0LWEucGRmAA4AKgAUAGQAbwBsAHMAdAByAGEAKwBsAGkAcwBhADAANAAtAGEALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASADhVc2Vycy9nYW1ibGluMi9zcmMvYnVpbGQtYmliL3BhcGVycy9kb2xzdHJhK2xpc2EwNC1hLnBkZgATAAEvAAAVAAIAD///AAAACAANABoAJABiAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAdw=},
  bdsk-url-1    = {http://dl.acm.org/citation.cfm?id=1052676.1052686}
}

@inproceedings{felleisen2015racket,
  author        = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram and Barzilay, Eli and McCarthy, Jay and Tobin-Hochstadt, Sam},
  booktitle     = {1st Summit on Advances in Programming Languages (SNAPL 2015)},
  date-added    = {2021-11-28 06:50:25 -0800},
  date-modified = {2021-11-28 06:50:25 -0800},
  organization  = {Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik},
  title         = {The racket manifesto},
  year          = {2015}
}

@article{gebser+:aicomm11,
  author        = {Gebser, Martin and Kaufmann, Benjamin and Kaminski, Roland and Ostrowski, Max and Schaub, Torsten and Schneider, Marius},
  date-added    = {2021-11-28 06:46:33 -0800},
  date-modified = {2021-11-28 06:46:33 -0800},
  journal       = {{AI Communications}},
  number        = {2},
  pages         = {107--124},
  publisher     = {Citeseer},
  title         = {Potassco: The Potsdam answer set solving collection},
  volume        = {24},
  year          = {2011},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA8Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZ2Vic2VyK2FpY29tbTExLWEucGRmTxEBfAAAAAABfAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////FWdlYnNlcithaWNvbW0xMS1hLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABgAEAAAKIGN1AAAAAAAAAAAAAAAAAAZwYXBlcnMAAgA7LzpVc2VyczpnYW1ibGluMjpzcmM6YnVpbGQtYmliOnBhcGVyczpnZWJzZXIrYWljb21tMTEtYS5wZGYAAA4ALAAVAGcAZQBiAHMAZQByACsAYQBpAGMAbwBtAG0AMQAxAC0AYQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAOVVzZXJzL2dhbWJsaW4yL3NyYy9idWlsZC1iaWIvcGFwZXJzL2dlYnNlcithaWNvbW0xMS1hLnBkZgAAEwABLwAAFQACAA///wAAAAgADQAaACQAYwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAHj}
}

@inproceedings{demoura+:tacas08,
  author        = {De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  booktitle     = {International conference on Tools and Algorithms for the Construction and Analysis of Systems},
  date-added    = {2021-11-28 06:42:48 -0800},
  date-modified = {2021-11-28 06:42:48 -0800},
  organization  = {Springer},
  pages         = {337--340},
  title         = {Z3: An efficient SMT solver},
  year          = {2008},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA8Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZGVtb3VyYSt0YWNhczA4LWEucGRmTxEBfAAAAAABfAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////FWRlbW91cmErdGFjYXMwOC1hLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABgAEAAAKIGN1AAAAAAAAAAAAAAAAAAZwYXBlcnMAAgA7LzpVc2VyczpnYW1ibGluMjpzcmM6YnVpbGQtYmliOnBhcGVyczpkZW1vdXJhK3RhY2FzMDgtYS5wZGYAAA4ALAAVAGQAZQBtAG8AdQByAGEAKwB0AGEAYwBhAHMAMAA4AC0AYQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAOVVzZXJzL2dhbWJsaW4yL3NyYy9idWlsZC1iaWIvcGFwZXJzL2RlbW91cmErdGFjYXMwOC1hLnBkZgAAEwABLwAAFQACAA///wAAAAgADQAaACQAYwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAHj}
}

@inproceedings{rosette,
  author    = {Emina Torlak and Rastislav Bodik},
  booktitle = pldi,
  title     = {A Lightweight Symbolic Virtual Machine for Solver-Aided Host Languages},
  year      = 2014
}


@inproceedings{torlak2013growing,
  author    = {Torlak, Emina and Bodik, Rastislav},
  title     = {Growing Solver-Aided Languages with Rosette},
  year      = {2013},
  isbn      = {9781450324724},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2509578.2509586},
  doi       = {10.1145/2509578.2509586},
  abstract  = {SAT and SMT solvers have automated a spectrum of programming tasks, including program synthesis, code checking, bug localization, program repair, and programming with oracles. In principle, we obtain all these benefits by translating the program (once) to a constraint system understood by the solver. In practice, however, compiling a language to logical formulas is a tricky process, complicated by having to map the solution back to the program level and extend the language with new solver-aided constructs, such as symbolic holes used in synthesis.This paper introduces ROSETTE, a framework for designing solver-aided languages. ROSETTE is realized as a solver-aided language embedded in Racket, from which it inherits extensive support for meta-programming. Our framework frees designers from having to compile their languages to constraints: new languages, and their solver-aided constructs, are defined by shallow (library-based) or deep (interpreter-based) embedding in ROSETTE itself.We describe three case studies, by ourselves and others, of using ROSETTE to implement languages and synthesizers for web scraping, spatial programming, and superoptimization of bitvector programs.},
  booktitle = {Proceedings of the 2013 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming \& Software},
  pages     = {135–152},
  numpages  = {18},
  keywords  = {solver-aided languages},
  location  = {Indianapolis, Indiana, USA},
  series    = {Onward! 2013}
}


@misc{cargo,
  date-added    = {2021-11-28 06:38:49 -0800},
  date-modified = {2021-11-28 06:41:10 -0800},
  howpublished  = {Online},
  month         = {March},
  note          = {https://github.com/rust-lang/cargo},
  title         = {{Cargo: The Rust package manager}},
  year          = {2014}
}

@misc{pip,
  author        = {Ian Bicking},
  date-added    = {2021-11-28 06:36:57 -0800},
  date-modified = {2021-11-28 06:38:36 -0800},
  month         = {April},
  note          = {github.com/pypa/pip},
  title         = {{pip: Package Install tool for Python}},
  year          = {2011}
}

@misc{npm,
  author        = {Isaac Z. Schlueter},
  date-added    = {2021-11-28 06:31:55 -0800},
  date-modified = {2021-11-28 06:35:11 -0800},
  howpublished  = {Online},
  month         = {September},
  note          = {https://github.com/npm/npm},
  title         = {{NPM}},
  year          = {2009}
}

@article{abate2012dependency,
  author        = {Abate, Pietro and Di Cosmo, Roberto and Treinen, Ralf and Zacchiroli, Stefano},
  date-added    = {2021-11-28 06:16:55 -0800},
  date-modified = {2021-11-28 06:16:55 -0800},
  journal       = {Journal of Systems and Software},
  number        = {10},
  pages         = {2228--2240},
  publisher     = {Elsevier},
  title         = {Dependency solving: a separate concern in component evolution management},
  volume        = {85},
  year          = {2012},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBALi4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvYWJhdGUyMDEyZGVwZW5kZW5jeS1hLnBkZk8RAYwAAAAAAYwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xlhYmF0ZTIwMTJkZXBlbmRlbmN5LWEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAYABAAACiBjdQAAAAAAAAAAAAAAAAAGcGFwZXJzAAIAPy86VXNlcnM6Z2FtYmxpbjI6c3JjOmJ1aWxkLWJpYjpwYXBlcnM6YWJhdGUyMDEyZGVwZW5kZW5jeS1hLnBkZgAADgA0ABkAYQBiAGEAdABlADIAMAAxADIAZABlAHAAZQBuAGQAZQBuAGMAeQAtAGEALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAD1Vc2Vycy9nYW1ibGluMi9zcmMvYnVpbGQtYmliL3BhcGVycy9hYmF0ZTIwMTJkZXBlbmRlbmN5LWEucGRmAAATAAEvAAAVAAIAD///AAAACAANABoAJABnAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAfc=}
}

@misc{rpm,
  author        = {Marc Ewing and Erik Troan},
  date-added    = {2021-11-28 06:00:26 -0800},
  date-modified = {2021-11-28 06:02:30 -0800},
  howpublished  = {Online},
  note          = {https://rpm.org/timeline.html},
  title         = {{RPM Timeline}},
  year          = {1995}
}

@misc{apt,
  author        = {Jason Gunthorpe},
  date-added    = {2021-11-28 05:51:45 -0800},
  date-modified = {2021-11-28 05:59:57 -0800},
  howpublished  = {Online},
  note          = {https://www.debian.org/doc/manuals/apt-guide/},
  title         = {{APT User's Guide}},
  year          = {1998}
}

@article{van1997software,
  author        = {Van Der Hoek, Andre and Hall, Richard S and Heimbigner, Dennis and Wolf, Alexander L},
  date-added    = {2021-11-28 05:43:45 -0800},
  date-modified = {2021-11-28 05:43:45 -0800},
  journal       = {ACM SIGSOFT Software Engineering Notes},
  number        = {6},
  pages         = {159--175},
  publisher     = {ACM New York, NY, USA},
  title         = {Software release management},
  volume        = {22},
  year          = {1997}
}

@article{abate-2013-modular-package-manager,
  abstract      = {Context
                   The success of modern software distributions in the Free and Open Source world can be explained, among other factors, by the availability of a large collection of software packages and the possibility to easily install and remove those components using state-of-the-art package managers. However, package managers are often built using a monolithic architecture and hard-wired and ad-hoc dependency solvers implementing some customized heuristics.
                   Objective
                   We aim at laying the foundation for improving on existing package managers. Package managers should be complete, that is find a solution whenever there exists one, and allow the user to specify complex criteria that define how to pick the best solution according to the user's preferences.
                   Method
                   In this paper we propose a modular architecture relying on precise interface formalisms that allows the system administrator to choose from a variety of dependency solvers and backends.
                   Results
                   We have built a working prototype--called MPM--following the design advocated in this paper, and we show how it largely outperforms a variety of current package managers.
                   Conclusion
                   We argue that a modular architecture, allowing for delegating the task of constraint solving to external solvers, is the path that leads to the next generation of package managers that will deliver better results, offer more expressive preference languages, and be easily adaptable to new platforms.},
  author        = {Pietro Abate and Roberto {Di Cosmo} and Ralf Treinen and Stefano Zacchiroli},
  date-added    = {2021-11-27 16:44:21 -0800},
  date-modified = {2021-11-27 16:44:21 -0800},
  doi           = {https://doi.org/10.1016/j.infsof.2012.09.002},
  issn          = {0950-5849},
  journal       = {Information and Software Technology},
  keywords      = {Software dependencies, Software repositories, Software components, Package manager, Open source},
  note          = {Special Section: Component-Based Software Engineering (CBSE), 2011},
  number        = {2},
  pages         = {459 - 474},
  title         = {A modular package manager architecture},
  url           = {http://www.sciencedirect.com/science/article/pii/S0950584912001851},
  volume        = {55},
  year          = {2013},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBPLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvYWJhdGUtMjAxMy1tb2R1bGFyLXBhY2thZ2UtbWFuYWdlci1hLnBkZk8RAcYAAAAAAcYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////x9hYmF0ZS0yMDEzLW1vZHVsYXIjRkZGRkZGRkYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAYABAAACiBjdQAAAAAAAAAAAAAAAAAGcGFwZXJzAAIATi86VXNlcnM6Z2FtYmxpbjI6c3JjOmJ1aWxkLWJpYjpwYXBlcnM6YWJhdGUtMjAxMy1tb2R1bGFyLXBhY2thZ2UtbWFuYWdlci1hLnBkZgAOAFIAKABhAGIAYQB0AGUALQAyADAAMQAzAC0AbQBvAGQAdQBsAGEAcgAtAHAAYQBjAGsAYQBnAGUALQBtAGEAbgBhAGcAZQByAC0AYQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIATFVzZXJzL2dhbWJsaW4yL3NyYy9idWlsZC1iaWIvcGFwZXJzL2FiYXRlLTIwMTMtbW9kdWxhci1wYWNrYWdlLW1hbmFnZXItYS5wZGYAEwABLwAAFQACAA///wAAAAgADQAaACQAdgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAJA},
  bdsk-url-1    = {http://www.sciencedirect.com/science/article/pii/S0950584912001851},
  bdsk-url-2    = {https://doi.org/10.1016/j.infsof.2012.09.002}
}

@inproceedings{michel+:lococo2010,
  author        = {Claude Michel and Michel Rueher},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/journals/corr/abs-1007-1020.bib},
  booktitle     = {Proceedings First International Workshop on Logics for Component Configuration, LoCoCo 2010, Edinburgh, UK, 10th July 2010},
  date-added    = {2021-11-27 16:38:46 -0800},
  date-modified = {2021-11-27 16:38:46 -0800},
  doi           = {10.4204/EPTCS.29.1},
  editor        = {In{\^{e}}s Lynce and Ralf Treinen},
  pages         = {1--10},
  series        = {{EPTCS}},
  timestamp     = {Wed, 12 Sep 2018 01:05:13 +0200},
  title         = {Handling software upgradeability problems with {MILP} solvers},
  url           = {https://doi.org/10.4204/EPTCS.29.1},
  volume        = {29},
  year          = {2010},
  bdsk-url-1    = {https://doi.org/10.4204/EPTCS.29.1}
}

@article{gebser+:2011-aspcud,
  author        = {Gebser, Martin and Kaminski, Roland and Schaub, Torsten},
  date-added    = {2021-11-27 16:37:19 -0800},
  date-modified = {2021-11-27 16:37:19 -0800},
  issn          = {2075-2180},
  journal       = {Electronic Proceedings in Theoretical Computer Science},
  month         = {Aug},
  pages         = {12--25},
  publisher     = {Open Publishing Association},
  title         = {aspcud: A Linux Package Configuration Tool Based on Answer Set Programming},
  volume        = {65},
  year          = {2011},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA/Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZ2Vic2VyKzIwMTEtYXNwY3VkLWEucGRmTxEBhgAAAAABhgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////GGdlYnNlcisyMDExLWFzcGN1ZC1hLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABgAEAAAKIGN1AAAAAAAAAAAAAAAAAAZwYXBlcnMAAgA+LzpVc2VyczpnYW1ibGluMjpzcmM6YnVpbGQtYmliOnBhcGVyczpnZWJzZXIrMjAxMS1hc3BjdWQtYS5wZGYADgAyABgAZwBlAGIAcwBlAHIAKwAyADAAMQAxAC0AYQBzAHAAYwB1AGQALQBhAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA8VXNlcnMvZ2FtYmxpbjIvc3JjL2J1aWxkLWJpYi9wYXBlcnMvZ2Vic2VyKzIwMTEtYXNwY3VkLWEucGRmABMAAS8AABUAAgAP//8AAAAIAA0AGgAkAGYAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB8A==},
  bdsk-url-1    = {http://dx.doi.org/10.4204/EPTCS.65.2},
  bdsk-url-2    = {http://dx.doi.org/10.4204/eptcs.65.2}
}

@inproceedings{argelich+:lococo2010,
  author        = {Josep Argelich and Daniel {Le Berre} and In{\^{e}}s Lynce and Jo{\~{a}}o P. Marques Silva and Pascal Rapicault},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/journals/corr/abs-1007-1021.bib},
  booktitle     = {Proceedings First International Workshop on Logics for Component Configuration, LoCoCo 2010, Edinburgh, UK, 10th July 2010},
  date-added    = {2021-11-27 16:36:57 -0800},
  date-modified = {2021-11-27 16:36:57 -0800},
  doi           = {10.4204/EPTCS.29.2},
  editor        = {In{\^{e}}s Lynce and Ralf Treinen},
  pages         = {11--22},
  series        = {{EPTCS}},
  timestamp     = {Wed, 12 Sep 2018 01:05:13 +0200},
  title         = {Solving Linux Upgradeability Problems Using Boolean Optimization},
  url           = {https://doi.org/10.4204/EPTCS.29.2},
  volume        = {29},
  year          = {2010},
  bdsk-url-1    = {https://doi.org/10.4204/EPTCS.29.2}
}

@techreport{dicosmo:edos,
  author        = {Roberto {Di Cosmo}},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 16:25:52 -0800},
  institution   = {{INRIA}},
  month         = {May 15},
  note          = {hal-00697463},
  title         = {{EDOS deliverable WP2-D2.1: Report on Formal Management of Software Dependencies}},
  year          = {2005},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA4Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZGljb3Ntb2Vkb3MtYS5wZGZPEQFsAAAAAAFsAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8RZGljb3Ntb2Vkb3MtYS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAGAAQAAAogY3UAAAAAAAAAAAAAAAAABnBhcGVycwACADcvOlVzZXJzOmdhbWJsaW4yOnNyYzpidWlsZC1iaWI6cGFwZXJzOmRpY29zbW9lZG9zLWEucGRmAAAOACQAEQBkAGkAYwBvAHMAbQBvAGUAZABvAHMALQBhAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvZ2FtYmxpbjIvc3JjL2J1aWxkLWJpYi9wYXBlcnMvZGljb3Ntb2Vkb3MtYS5wZGYAABMAAS8AABUAAgAP//8AAAAIAA0AGgAkAF8AAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAABzw==},
  bdsk-url-1    = {https://hal.inria.fr/hal-00697463}
}

@inproceedings{tucker+:icse07-opium,
  address       = {USA},
  author        = {Tucker, Chris and Shuffelton, David and Jhala, Ranjit and Lerner, Sorin},
  booktitle     = {Proceedings of the 29th International Conference on Software Engineering},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  isbn          = {0769528287},
  numpages      = {11},
  pages         = {178--188},
  publisher     = {IEEE Computer Society},
  series        = {ICSE '07},
  title         = {OPIUM: Optimal Package Install/Uninstall Manager},
  year          = {2007},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBALi4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvdHVja2VyK2ljc2UwNy1vcGl1bS1hLnBkZk8RAYwAAAAAAYwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xl0dWNrZXIraWNzZTA3LW9waXVtLWEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAYABAAACiBjdQAAAAAAAAAAAAAAAAAGcGFwZXJzAAIAPy86VXNlcnM6Z2FtYmxpbjI6c3JjOmJ1aWxkLWJpYjpwYXBlcnM6dHVja2VyK2ljc2UwNy1vcGl1bS1hLnBkZgAADgA0ABkAdAB1AGMAawBlAHIAKwBpAGMAcwBlADAANwAtAG8AcABpAHUAbQAtAGEALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAD1Vc2Vycy9nYW1ibGluMi9zcmMvYnVpbGQtYmliL3BhcGVycy90dWNrZXIraWNzZTA3LW9waXVtLWEucGRmAAATAAEvAAAVAAIAD///AAAACAANABoAJABnAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAfc=},
  bdsk-url-1    = {https://doi.org/10.1109/ICSE.2007.59}
}

@inproceedings{gamblin+:sc15,
  acceptancerate = {22\%},
  address        = {Austin, Texas},
  author         = {Todd Gamblin and Matthew P. LeGendre and Michael R. Collette and Gregory L. Lee and Adam Moody and Bronis R. de Supinski and W. Scott Futral},
  booktitle      = {Supercomputing 2015 (SC'15)},
  date-added     = {2021-11-27 15:58:40 -0800},
  date-modified  = {2021-11-27 15:58:40 -0800},
  month          = {November 15-20},
  note           = {LLNL-CONF-669890},
  title          = {{The Spack Package Manager: Bringing order to HPC software chaos}},
  year           = {2015},
  bdsk-file-1    = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA5Li4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvZ2FtYmxpbitzYzE1LWEucGRmTxEBbgAAAAABbgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////EmdhbWJsaW4rc2MxNS1hLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABgAEAAAKIGN1AAAAAAAAAAAAAAAAAAZwYXBlcnMAAgA4LzpVc2VyczpnYW1ibGluMjpzcmM6YnVpbGQtYmliOnBhcGVyczpnYW1ibGluK3NjMTUtYS5wZGYADgAmABIAZwBhAG0AYgBsAGkAbgArAHMAYwAxADUALQBhAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvZ2FtYmxpbjIvc3JjL2J1aWxkLWJpYi9wYXBlcnMvZ2FtYmxpbitzYzE1LWEucGRmABMAAS8AABUAAgAP//8AAAAIAA0AGgAkAGAAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB0g==},
  bdsk-url-1     = {http://tgamblin.github.io/pubs/spack-sc15.pdf}
}

@misc{cox:version-sat,
  author        = {Russ Cox},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  howpublished  = {https://research.swtch.com/version-sat},
  month         = {December 13},
  title         = {{Version SAT}},
  year          = {2016},
  bdsk-url-1    = {https://research.swtch.com/version-sat}
}

@inproceedings{gamblin:fosdem18-compilers-dependencies,
  address       = {Brussels, Belgium},
  author        = {Todd Gamblin},
  booktitle     = {{Free and Open source Software Developers' European Meeting (FOSDEM'18)}},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  month         = {February 3},
  title         = {{How compilers affect dependency resolution in Spack}},
  year          = {2018},
  bdsk-url-1    = {https://fosdem.org/2018/schedule/event/spack/}
}

@misc{weizenbaum:pubgrub18,
  author        = {Natalie Weizenbaum},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  howpublished  = {https://medium.com/@nex3/pubgrub-2fb6470504f},
  month         = {April 2},
  title         = {{PubGrub: Next-Generation Version Solving}},
  year          = {2018},
  bdsk-url-1    = {https://medium.com/@nex3/pubgrub-2fb6470504f}
}

@inproceedings{abate2020dependency,
  author        = {Abate, Pietro and Di Cosmo, Roberto and Gousios, Georgios and Zacchiroli, Stefano},
  booktitle     = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  organization  = {IEEE},
  pages         = {547--551},
  title         = {Dependency Solving Is Still Hard, but We Are Getting Better at It},
  year          = {2020},
  bdsk-file-1   = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBALi4vLi4vLi4vLi4vLi4vLi4vc3JjL2J1aWxkLWJpYi9wYXBlcnMvYWJhdGUyMDIwZGVwZW5kZW5jeS1hLnBkZk8RAYwAAAAAAYwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xlhYmF0ZTIwMjBkZXBlbmRlbmN5LWEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAYABAAACiBjdQAAAAAAAAAAAAAAAAAGcGFwZXJzAAIAPy86VXNlcnM6Z2FtYmxpbjI6c3JjOmJ1aWxkLWJpYjpwYXBlcnM6YWJhdGUyMDIwZGVwZW5kZW5jeS1hLnBkZgAADgA0ABkAYQBiAGEAdABlADIAMAAyADAAZABlAHAAZQBuAGQAZQBuAGMAeQAtAGEALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAD1Vc2Vycy9nYW1ibGluMi9zcmMvYnVpbGQtYmliL3BhcGVycy9hYmF0ZTIwMjBkZXBlbmRlbmN5LWEucGRmAAATAAEvAAAVAAIAD///AAAACAANABoAJABnAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAfc=}
}

@inproceedings{gamblin:fosdem20-concretizer,
  address       = {Brussels, Belgium},
  author        = {Todd Gamblin},
  booktitle     = {{Free and Open source Software Developers' European Meeting (FOSDEM'20)}},
  date-added    = {2021-11-27 15:58:40 -0800},
  date-modified = {2021-11-27 15:58:40 -0800},
  month         = {February 1},
  title         = {{Spack's new Concretizer: Dependency solving is more than just SAT!}},
  year          = {2020},
  bdsk-url-1    = {https://fosdem.org/2018/schedule/event/spack/}
}

@inproceedings{haas:2017:bringing,
  author    = {Andreas Haas and Andreas Rossberg and Derek~L. Schuff and Ben~L. Titzer and Michael Holman and Dan Gohman and Luke Wagner and Alon Zakai and {JF} Bastien},
  booktitle = pldi,
  series    = {PLDI'17},
  title     = {Bringing the {Web} Up to Speed with {WebAssembly}},
  year      = 2017
}

@inproceedings{flatt:2007:adding,
  author    = {Flatt, Matthew and Yu, Gang and Findler, Robert Bruce and Felleisen, Matthias},
  booktitle = icfp,
  series    = {ICFP'07},
  title     = {Adding Delimited and Composable Control to a Production Programming Environment},
  year      = 2007
}

@inproceedings{baxter:2018:putting,
  author    = {Samuel Baxter and Rachit Nigam and Joe Gibbs Politz and Shriram Krishnamurthi and Arjun Guha},
  booktitle = pldi,
  series    = {PLDI'18},
  title     = {Putting in All the Stops: Execution Control for {JavaScript}},
  year      = 2018
}

@article{sitaram:1990:control,
  author  = {Dorai Sitaram and Matthias Felleisen},
  journal = {{LISP} and Symbolic Computation},
  month   = may,
  number  = 1,
  pages   = {67--99},
  title   = {Control Delimiters and Their Hierarchies},
  volume  = 3,
  year    = {1990}
}

@inproceedings{felleisen:1988:the,
  author    = {Felleisen, Mattias},
  booktitle = popl,
  location  = {San Diego, CA, USA},
  numpages  = {11},
  pages     = {180-190},
  series    = {POPL'88},
  title     = {The Theory and Practice of First-Class Prompts},
  year      = 1988
}

@inproceedings{danvy:1990:abstracting,
  author    = {Danvy, Olivier and Filinski, Andrzej},
  booktitle = lfp,
  location  = {Nice, France},
  numpages  = {10},
  pages     = {151-160},
  series    = {LFP'90},
  title     = {Abstracting Control},
  year      = {1990}
}

@inproceedings{farvardin:2020:from,
  author    = {Farvardin, Kavon and Reppy, John},
  booktitle = pldi,
  series    = {PLDI'20},
  title     = {From Folklore to Fact: Comparing Implementations of Stacks and Continuations},
  year      = {2020}
}

@misc{wasm:threads,
  howpublished = {\url{https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md}. Accessed Jul 4 2020},
  title        = {Threading proposal for {WebAssembly}},
  year         = {2020}
}

@misc{wasm:exceptions,
  howpublished = {\url{https://github.com/WebAssembly/exception-handling/blob/master/proposals/Exceptions.md}. Accessed Jul 4 2020},
  title        = {Exception handling},
  year         = {2020}
}

@misc{wasm:asyncify,
  author       = {Zakai, Alon},
  howpublished = {\url{https://kripken.github.io/blog/wasm/2019/07/16/asyncify.html}. Accessed Jul 4 2020},
  title        = {Pause and Resume {WebAssembly} with {B}inaryen's {A}syncify},
  year         = {2019}
}

@misc{wasm:effects,
  author       = {Rossberg, Andreas and Leijen, Daan and Hillerstr\"om, Daniel and Sivaramakrishnan, KC and Pretnar, Matija and Lindley, Sam and Dolan, Stephen},
  howpublished = {\url{https://github.com/WebAssembly/meetings/blob/master/main/2020/presentations/2020-02-rossberg-continuations.pdf}. Accessed Jul 4 2020},
  title        = {Stacks and Continuations for {W}asm --- Idea Sketch},
  year         = {2019}
}

@misc{wasm:c-ray,
  howpublished = {\url{https://github.com/vkoskiv/c-ray}. Accessed Jul 4 2020},
  title        = {C-Ray},
  year         = {2020}
}

@misc{wasm:electron,
  howpublished = {\url{https://www.electronjs.org}. Accessed July 5, 2020},
  title        = {Electron},
  year         = {2020}
}

@inproceedings{jangda:2019:not-so-fast,
  author    = {Abhinav Jangda and Bobby Powers and Emery Berger and Arjun Guha},
  booktitle = atc,
  series    = {ATC'19},
  title     = {Not So Fast: {Analyzing} the Performance of {WebAssembly} vs.\ Native Code},
  year      = 2019
}

@inproceedings{paige:2014:compilation,
  author    = {Paige, Brooks and Wood, Frank},
  booktitle = icml,
  series    = {ICML'14},
  title     = {A Compilation Target for Probabilistic Programming Languages},
  year      = {2014}
}

@misc{wasm:go-issue-1,
  howpublished = {\url{https://github.com/golang/go/issues/39620}. Accessed July 5, 2020},
  title        = {misc/{W}asm: long tasks with {Go} {WebAssembly}},
  year         = {2020}
}

@misc{wasm:go-issue-2,
  howpublished = {\url{https://github.com/golang/go/issues/32591}. Accessed July 5, 2020},
  title        = {syscall/js: performance considerations},
  year         = {2020}
}

@misc{wasm:go-issue-3,
  howpublished = {\url{https://github.com/golang/go/issues/35256}. Accessed July 5, 2020},
  title        = {runtime: fatal error: self deadlock {WebAssembly}},
  year         = {2020}
}

@misc{wasm:go-issue-4,
  howpublished = {\url{https://github.com/golang/go/issues/26277}. Accessed July 5, 2020},
  title        = {{W}asm: 3x performance overhead of using {WebAssembly} in {N}ode 8},
  year         = {2020}
}

@misc{wasm:racket-generator,
  howpublished = {\url{https://github.com/racket/racket/blob/ac4ae9ebba653c76edb2bb1f08ec1007427e5333/racket/collects/racket/generator.rkt\#L30}. Accessed July 5, 2020},
  title        = {generator.rkt},
  year         = {2020}
}

@misc{wasm:spec,
  howpublished = {\url{https://webassembly.github.io/spec/core/}. Accessed Jul 6 2020},
  title        = {{WebAssembly} Specification},
  year         = {2020}
}

@misc{wasm:coq,
  author       = {Huang, Xuan},
  howpublished = {\url{https://www.cs.rit.edu/~mtf/student-resources/20191_huang_mscourse.pdf}. Accessed Jul 7 2020},
  title        = {A Mechanized Formalization of the {WebAssembly} Specification in {C}oq},
  year         = {2020}
}

@inproceedings{watt:2018:mechanising,
  author    = {Watt, Conrad},
  booktitle = cpp,
  series    = {CPP'18},
  title     = {Mechanising and Verifying the WebAssembly 	Specification},
  year      = {2018}
}

@inproceedings{watt:2019:weakening,
  author    = {Watt, Conrad and Rossberg, Andreas and Pichon-Pharabod, Jean},
  booktitle = oopsla,
  series    = {OOPSLA'19},
  title     = {Weakening WebAssembly},
  year      = {2019}
}

@inproceedings{wasm:R5RS,
  author    = {Adams, N. I. and Bartley, D. H. and Brooks, G. and Dybvig, R. K. and Friedman, D. P. and Halstead, R. and Hanson, C. and Haynes, C. T. and Kohlbecker, E. and Oxley, D. and Pitman, K. M. and Rozas, G. J. and Steele, G. L. and Sussman, G. J. and Wand, M. and Abelson, H.},
  booktitle = hosc,
  series    = {HOSC'98},
  title     = {{Revised$^5$} Report on the Algorithmic Language Scheme},
  year      = {1998}
}

@inproceedings{pettyjohn:cm,
  author    = {Greg Pettyjohn and John Clements and Joe Marshall and Shriram Krishnamurthi and Matthias Felleisen},
  booktitle = icfp,
  series    = {ICFP'05},
  title     = {Continuations from generalized stack inspection},
  year      = {2005}
}

@misc{wasm:lua-vm-wasm,
  howpublished = {\url{https://github.com/vvanders/wasm_lua}. Accessed Sept 6, 2020},
  title        = {wasm\_lua},
  year         = {2020}
}

@inproceedings{wasm:WARDuino,
  author    = {Gurdeep Singh, Robbert and Scholliers, Christophe},
  booktitle = mplr,
  series    = {MPLR'2019},
  title     = {WARDuino: A Dynamic WebAssembly Virtual Machine for Programming Microcontrollers},
  year      = {2019}
}

@misc{pinckney:arxiv-wasmk,
  author     = {Donald Pinckney and Arjun Guha and Yuriy Brun},
  title      = {Wasm/k: Delimited Continuations for WebAssembly},
  url        = {https://arxiv.org/abs/2010.01723},
  year       = 2020,
  bdsk-url-1 = {https://arxiv.org/abs/2010.01723}
}

@misc{inspectpack,
  howpublished = {\url{formidable.com/blog/2018/finding-webpack-duplicates-with-inspectpack-plugin/}. Accessed Aug 29 2022},
  title        = {Finding and fixing duplicates in webpack with {Inspectpack}},
  author       = {Ryan Roemer},
  year         = 2022
}

@misc{parcel-bug,
  howpublished = {\url{github.com/parcel-bundler/parcel/issues/3523}. Accessed Aug 29 2022},
  title        = {Similar Files are Collapsed (breaking react-bootstrap)},
  author       = {Sven Neumann},
  year         = 2019
}

@misc{webpack-side-effects,
  author       = {Webpack Contributors},
  howpublished = {\url{webpack.js.org/guides/tree-shaking/\#mark-the-file-as-side-effect-free}. Accessed Aug 29 2022},
  title        = {Mark the file as side-effect-free},
  key          = {Webpack},
  year         = 2022
}


@misc{conda-slow,
  author       = {Conda Contributors},
  howpublished = {\url{docs.conda.io/projects/conda/en/latest/user-guide/concepts/conda-performance.html}. Accessed Sep 1 2022},
  title        = {Conda performance},
  year         = 2022
}

@dataset{citeTheArtifact,
  author       = {Anonymous, Anonymous},
  title        = {{Artifact For A Large Scale Analysis of Semantic 
                   Versioning in NPM}},
  month        = jan,
  year         = 2023,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.7552551},
  url          = {https://doi.org/10.5281/zenodo.7552551}
}

@misc{pinckney:arxiv-maxnpm,
  author     = {Donald Pinckney and Federico Cassano and Arjun Guha and Jon Bell and Massimiliano Culpo and Todd Gamblin},
  title      = {Flexible and Optimal Dependency Management via Max-SMT},
  url        = {https://arxiv.org/abs/2203.13737},
  year       = 2022,
  bdsk-url-1 = {https://arxiv.org/abs/2203.13737}
}


@misc{ssri-vuln,
  author     = {Ben Caller},
  title      = {Security Advisory: Regular Expression Denial of service (ReDoS) in npm/ssri},
  url        = {https://doyensec.com/resources/Doyensec_Advisory_ssri_redos.pdf},
  year       = 2021
}

@misc{xmlhttprequest-vuln,
  title      = {CVE-2020-28502 Detail},
  url        = {https://nvd.nist.gov/vuln/detail/CVE-2020-28502},
  year       = 2021
}

@inproceedings{semantics-in-semantic-versioning,
author = {Lam, Patrick and Dietrich, Jens and Pearce, David J.},
title = {Putting the Semantics into Semantic Versioning},
year = {2020},
isbn = {9781450381789},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426428.3426922},
doi = {10.1145/3426428.3426922},
abstract = {The long-standing aspiration for software reuse has made astonishing strides in the past few years. Many modern software development ecosystems now come with rich sets of publicly-available components contributed by the community. Downstream developers can leverage these upstream components, boosting their productivity. However, components evolve at their own pace. This imposes obligations on and yields benefits for downstream developers, especially since changes can be breaking, requiring additional downstream work to adapt to. Upgrading too late leaves downstream vulnerable to security issues and missing out on useful improvements; upgrading too early results in excess work. Semantic versioning has been proposed as an elegant mechanism to communicate levels of compatibility, enabling downstream developers to automate dependency upgrades. While it is questionable whether a version number can adequately characterize version compatibility in general, we argue that developers would greatly benefit from tools such as semantic version calculators to help them upgrade safely. The time is now for the research community to develop such tools: large component ecosystems exist and are accessible, component interactions have become observable through automated builds, and recent advances in program analysis make the development of relevant tools feasible. In particular, contracts (both traditional and lightweight) are a promising input to semantic versioning calculators, which can suggest whether an upgrade is likely to be safe.},
booktitle = {Proceedings of the 2020 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {157–179},
numpages = {23},
keywords = {semantic versioning, program evolution, code contracts, program analysis, verification},
location = {Virtual, USA},
series = {Onward! 2020}
}

@inproceedings{amalfi,
author = {Sejfia, Adriana and Sch\"{a}fer, Max},
title = {Practical Automated Detection of Malicious Npm Packages},
year = {2022},
isbn = {9781450392211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510003.3510104},
doi = {10.1145/3510003.3510104},
abstract = {The npm registry is one of the pillars of the JavaScript and Type-Script ecosystems, hosting over 1.7 million packages ranging from simple utility libraries to complex frameworks and entire applications. Each day, developers publish tens of thousands of updates as well as hundreds of new packages. Due to the overwhelming popularity of npm, it has become a prime target for malicious actors, who publish new packages or compromise existing packages to introduce malware that tampers with or exfiltrates sensitive data from users who install either these packages or any package that (transitively) depends on them. Defending against such attacks is essential to maintaining the integrity of the software supply chain, but the sheer volume of package updates makes comprehensive manual review infeasible. We present Amalfi, a machine-learning based approach for automatically detecting potentially malicious packages comprised of three complementary techniques. We start with classifiers trained on known examples of malicious and benign packages. If a package is flagged as malicious by a classifier, we then check whether it includes metadata about its source repository, and if so whether the package can be reproduced from its source code. Packages that are reproducible from source are not usually malicious, so this step allows us to weed out false positives. Finally, we also employ a simple textual clone-detection technique to identify copies of malicious packages that may have been missed by the classifiers, reducing the number of false negatives. Amalfi improves on the state of the art in that it is lightweight, requiring only a few seconds per package to extract features and run the classifiers, and gives good results in practice: running it on 96287 package versions published over the course of one week, we were able to identify 95 previously unknown malware samples, with a manageable number of false positives.},
booktitle = {Proceedings of the 44th International Conference on Software Engineering},
pages = {1681–1692},
numpages = {12},
keywords = {supply chain security, malware detection},
location = {Pittsburgh, Pennsylvania},
series = {ICSE '22}
}


@ARTICLE{npm-downgrades,
  author={Cogo, Filipe Roseiro and Oliva, Gustavo A. and Hassan, Ahmed E.},
  journal={IEEE Transactions on Software Engineering}, 
  title={An Empirical Study of Dependency Downgrades in the npm Ecosystem}, 
  year={2021},
  volume={47},
  number={11},
  pages={2457-2470},
  doi={10.1109/TSE.2019.2952130}
}

@misc{micro-packages,
  doi = {10.48550/ARXIV.1709.04638},
  url = {https://arxiv.org/abs/1709.04638},
  author = {Kula, Raula Gaikovina and Ouni, Ali and German, Daniel M. and Inoue, Katsuro},
  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {On the Impact of Micro-Packages: An Empirical Study of the npm JavaScript Ecosystem},
  publisher = {arXiv},
  year = {2017},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{snyk,
  howpublished = {\url{https://snyk.io/product/open-source-security-management/}. Accessed Jan 20 2023},
  title        = {Snyk Open Source},
  year         = {2023}
}

@misc{package_json,
  howpublished = {\url{https://docs.npmjs.com/cli/v9/configuring-npm/package-json#dependencies}. Accessed Jan 20 2023},
  title        = {package.json},
  year         = {2023}
}



@ARTICLE{trivial-packages,
  author={Chowdhury, Md Atique Reza and Abdalkareem, Rabe and Shihab, Emad and Adams, Bram},
  journal={IEEE Transactions on Software Engineering}, 
  title={On the Untriviality of Trivial Packages: An Empirical Study of npm JavaScript Packages}, 
  year={2022},
  volume={48},
  number={8},
  pages={2695-2708},
  doi={10.1109/TSE.2021.3068901}
}

@inproceedings{trivial-packages-why,
  author = {Abdalkareem, Rabe and Nourry, Olivier and Wehaibi, Sultan and Mujahid, Suhaib and Shihab, Emad},
  title = {Why Do Developers Use Trivial Packages? An Empirical Case Study on Npm},
  year = {2017},
  isbn = {9781450351058},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3106237.3106267},
  doi = {10.1145/3106237.3106267},
  abstract = {Code reuse is traditionally seen as good practice. Recent trends have pushed the concept of code reuse to an extreme, by using packages that implement simple and trivial tasks, which we call `trivial packages'. A recent incident where a trivial package led to the breakdown of some of the most popular web applications such as Facebook and Netflix made it imperative to question the growing use of trivial packages. Therefore, in this paper, we mine more than 230,000 npm packages and 38,000 JavaScript applications in order to study the prevalence of trivial packages. We found that trivial packages are common and are increasing in popularity, making up 16.8\% of the studied npm packages. We performed a survey with 88 Node.js developers who use trivial packages to understand the reasons and drawbacks of their use. Our survey revealed that trivial packages are used because they are perceived to be well implemented and tested pieces of code. However, developers are concerned about maintaining and the risks of breakages due to the extra dependencies trivial packages introduce. To objectively verify the survey results, we empirically validate the most cited reason and drawback and find that, contrary to developers' beliefs, only 45.2\% of trivial packages even have tests. However, trivial packages appear to be `deployment tested' and to have similar test, usage and community interest as non-trivial packages. On the other hand, we found that 11.5\% of the studied trivial packages have more than 20 dependencies. Hence, developers should be careful about which trivial packages they decide to use.},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  pages = {385–395},
  numpages = {11},
  keywords = {JavaScript, Node.js, Empirical Studies, Code Reuse},
  location = {Paderborn, Germany},
  series = {ESEC/FSE 2017}
}

@article{google-play-scraping,
  author = {Viennot, Nicolas and Garcia, Edward and Nieh, Jason},
  title = {A Measurement Study of Google Play},
  year = {2014},
  issue_date = {June 2014},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {42},
  number = {1},
  issn = {0163-5999},
  url = {https://doi.org/10.1145/2637364.2592003},
  doi = {10.1145/2637364.2592003},
  abstract = {Although millions of users download and use third-party Android applications from the Google Play store, little information is known on an aggregated level about these applications. We have built PlayDrone, the first scalable Google Play store crawler, and used it to index and analyze over 1,100,000 applications in the Google Play store on a daily basis, the largest such index of Android applications. PlayDrone leverages various hacking techniques to circumvent Google's roadblocks for indexing Google Play store content, and makes proprietary application sources available, including source code for over 880,000 free applications. We demonstrate the usefulness of PlayDrone in decompiling and analyzing application content by exploring four previously unaddressed issues: the characterization of Google Play application content at large scale and its evolution over time, library usage in applications and its impact on application portability, duplicative application content in Google Play, and the ineffectiveness of OAuth and related service authentication mechanisms resulting in malicious users being able to easily gain unauthorized access to user data and resources on Amazon Web Services and Facebook.},
  journal = {SIGMETRICS Perform. Eval. Rev.},
  month = {jun},
  pages = {221–233},
  numpages = {13},
  keywords = {oauth, clone detection, mobile computing, security, android, decompilation, google play, authentication}
}

@inproceedings{python-type-annotations,
  author = {Di Grazia, Luca and Pradel, Michael},
  title = {The Evolution of Type Annotations in Python: An Empirical Study},
  year = {2022},
  isbn = {9781450394130},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3540250.3549114},
  doi = {10.1145/3540250.3549114},
  abstract = {Type annotations and gradual type checkers attempt to reveal errors and facilitate maintenance in dynamically typed programming languages. Despite the availability of these features and tools, it is currently unclear how quickly developers are adopting them, what strategies they follow when doing so, and whether adding type annotations reveals more type errors. This paper presents the first large-scale empirical study of the evolution of type annotations and type errors in Python. The study is based on an analysis of 1,414,936 type annotation changes, which we extract from 1,123,393 commits among 9,655 projects. Our results show that (i) type annotations are getting more popular, and once added, often remain unchanged in the projects for a long time, (ii) projects follow three evolution patterns for type annotation usage -- regular annotation, type sprints, and occasional uses -- and that the used pattern correlates with the number of contributors, (iii) more type annotations help find more type errors (0.704 correlation), but nevertheless, many commits (78.3\%) are committed despite having such errors. Our findings show that better developer training and automated techniques for adding type annotations are needed, as most code still remains unannotated, and they call for a better integration of gradual type checking into the development process.},
  booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  pages = {209–220},
  numpages = {12},
  keywords = {Python, empirical study, Type annotations, type errors},
  location = {Singapore, Singapore},
  series = {ESEC/FSE 2022}
}

@inproceedings{dynamics-of-js-ecosystem,
    author = {Wittern, Erik and Suter, Philippe and Rajagopalan, Shriram},
    title = {A Look at the Dynamics of the JavaScript Package Ecosystem},
    year = {2016},
    isbn = {9781450341868},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2901739.2901743},
    doi = {10.1145/2901739.2901743},
    abstract = {The node package manager (npm) serves as the frontend to a large repository of JavaScript-based software packages, which foster the development of currently huge amounts of server-side Node. js and client-side JavaScript applications. In a span of 6 years since its inception, npm has grown to become one of the largest software ecosystems, hosting more than 230, 000 packages, with hundreds of millions of package installations every week. In this paper, we examine the npm ecosystem from two complementary perspectives: 1) we look at package descriptions, the dependencies among them, and download metrics, and 2) we look at the use of npm packages in publicly available applications hosted on GitHub. In both perspectives, we consider historical data, providing us with a unique view on the evolution of the ecosystem. We present analyses that provide insights into the ecosystem's growth and activity, into conflicting measures of package popularity, and into the adoption of package versions over time. These insights help understand the evolution of npm, design better package recommendation engines, and can help developers understand how their packages are being used.},
    booktitle = {Proceedings of the 13th International Conference on Mining Software Repositories},
    pages = {351–361},
    numpages = {11},
    keywords = {Node.js, software ecosystem analysis, JavaScript},
    location = {Austin, Texas},
    series = {MSR '16}
}

@inproceedings{stability-dependencies,
  author={Bogart, Christopher and Kästner, Christian and Herbsleb, James},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW)}, 
  title={When It Breaks, It Breaks: How Ecosystem Developers Reason about the Stability of Dependencies}, 
  year={2015},
  volume={},
  number={},
  pages={86-89},
  doi={10.1109/ASEW.2015.21}
}


@inproceedings{weak-links-npm,
  author = {Zahan, Nusrat and Zimmermann, Thomas and Godefroid, Patrice and Murphy, Brendan and Maddila, Chandra and Williams, Laurie},
  title = {What Are Weak Links in the Npm Supply Chain?},
  year = {2022},
  isbn = {9781450392266},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3510457.3513044},
  doi = {10.1145/3510457.3513044},
  abstract = {Modern software development frequently uses third-party packages, raising the concern of supply chain security attacks. Many attackers target popular package managers, like npm, and their users with supply chain attacks. In 2021 there was a 650\% year-on-year growth in security attacks by exploiting Open Source Software's supply chain. Proactive approaches are needed to predict package vulnerability to high-risk supply chain attacks. The goal of this work is to help software developers and security specialists in measuring npm supply chain weak link signals to prevent future supply chain attacks by empirically studying npm package metadata.In this paper, we analyzed the metadata of 1.63 million JavaScript npm packages. We propose six signals of security weaknesses in a software supply chain, such as the presence of install scripts, maintainer accounts associated with an expired email domain, and inactive packages with inactive maintainers. One of our case studies identified 11 malicious packages from the install scripts signal. We also found 2,818 maintainer email addresses associated with expired domains, allowing an attacker to hijack 8,494 packages by taking over the npm accounts. We obtained feedback on our weak link signals through a survey responded to by 470 npm package developers. The majority of the developers supported three out of our six proposed weak link signals. The developers also indicated that they would want to be notified about weak links signals before using third-party packages. Additionally, we discussed eight new signals suggested by package developers.},
  booktitle = {Proceedings of the 44th International Conference on Software Engineering: Software Engineering in Practice},
  pages = {331–340},
  numpages = {10},
  keywords = {software ecosystem, supply chain security, npm, weak link signal},
  location = {Pittsburgh, Pennsylvania},
  series = {ICSE-SEIP '22}
}

@inproceedings{npm-security-threats,
  author = {Zimmermann, Markus and Staicu, Cristian-Alexandru and Tenny, Cam and Pradel, Michael},
  title = {Smallworld with High Risks: A Study of Security Threats in the Npm Ecosystem},
  year = {2019},
  isbn = {9781939133069},
  publisher = {USENIX Association},
  address = {USA},
  abstract = {The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer accounts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to depend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained packages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness.},
  booktitle = {Proceedings of the 28th USENIX Conference on Security Symposium},
  pages = {995–1010},
  numpages = {16},
  location = {Santa Clara, CA, USA},
  series = {SEC'19}
}


@InProceedings{technical-lag,
  author="Zerouali, Ahmed
  and Constantinou, Eleni
  and Mens, Tom
  and Robles, Gregorio
  and Gonz{\'a}lez-Barahona, Jes{\'u}s",
  editor="Capilla, Rafael
  and Gallina, Barbara
  and Cetina, Carlos",
  title="An Empirical Analysis of Technical Lag in npm Package Dependencies",
  booktitle="New Opportunities for Software Reuse",
  year="2018",
  publisher="Springer International Publishing",
  address="Cham",
  pages="95--110",
  abstract="Software library packages are constantly evolving and increasing in number. Not updating to the latest available release of dependent libraries may negatively affect software development by not benefiting from new functionality, vulnerability and bug fixes available in more recent versions. On the other hand, automatically updating to the latest release may introduce incompatibility issues. We introduce a technical lag metric for dependencies in package networks, in order to assess how outdated a software package is compared to the latest available releases of its dependencies. We empirically analyse the package update practices and technical lag for the npm distribution of JavaScript packages. Our results show a strong presence of technical lag caused by the specific use of dependency constraints, indicating a reluctance to update dependencies to avoid backward incompatible changes.",
  isbn="978-3-319-90421-4"
}

@inproceedings{maven-semver-not-followed,
  author={Raemaekers, Steven and van Deursen, Arie and Visser, Joost},
  booktitle={2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation}, 
  title={Semantic Versioning versus Breaking Changes: A Study of the Maven Repository}, 
  year={2014},
  volume={},
  number={},
  pages={215-224},
  doi={10.1109/SCAM.2014.30}
}

@article{semver-compliance-multiple-ecosystems,
  author={Decan, Alexandre and Mens, Tom},
  journal={IEEE Transactions on Software Engineering}, 
  title={What Do Package Dependencies Tell Us About Semantic Versioning?}, 
  year={2021},
  volume={47},
  number={6},
  pages={1226-1240},
  doi={10.1109/TSE.2019.2918315}
}
